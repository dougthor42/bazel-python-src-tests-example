load("@rules_python//python:defs.bzl", "py_binary", "py_library")

# A target that represents the entire python package as a whole. It can be
# referenced with `//src/mypackage` because bazel autoexpands this label to
# `//src/mypackage:mypackage`.
# Typically this target isn't use by, say, tests, because doing so would mean
# that bazel can't cache things well. For example, if bar.py changes but foo.py
# doesn't, it still means that this entire target is considered "changed".
# This target _would_ have been generated by gazelle if we were using
# the 'gazelle:python_generation_mode package' directive (which is the default)
py_library(
    name = "mypackage",
    # Can also use `srcs = glob(["*.py"]),` but gazelle does things explicitly.
    srcs = [
        "__init__.py",
        "foo.py",
        "foobar.py",
    ],
    imports = [".."],
    visibility = [
        "//src:__subpackages__",
        "//tests:__subpackages__",
    ],
    deps = [
        "//src/mypackage/subpackage:subfoo",
        "@pypi//pathspec",
    ],
)

py_library(
    name = "foo",
    srcs = ["foo.py"],
    imports = [".."],  # This causes `src` to get added to sys.path
    visibility = [
        "//src:__subpackages__",
        "//tests:__subpackages__",
    ],
    deps = [
        "//src/mypackage/subpackage:subfoo",  # relative paths not allowed.
        "@pypi//pathspec",
    ],
)

# A library that is also executable (but is not the "primary" executable).
# A separate target generates the binary.
py_library(
    name = "foobar",
    srcs = ["foobar.py"],
    imports = [".."],
    visibility = [
        "//src:__subpackages__",
        "//tests:__subpackages__",
    ],
    deps = [
        ":foo",
        "//src/mypackage/subpackage:subfoo",
    ],
)

# This target is not auto-generated. Make it ourselves.
# Execute with `bazel run //src/mypackage:foobar_bin`
py_binary(
    name = "foobar_bin",
    srcs = ["foobar.py"],
    imports = [".."],
    main = "foobar.py",
    deps = [":foobar"],
)

# An example of a frozen binary.
# Run with `bazel run //src/mypackage:mypackage_bin`
py_binary(
    name = "mypackage_bin",
    srcs = ["__main__.py"],
    imports = [".."],
    main = "__main__.py",
    visibility = [
        "//src:__subpackages__",
        "//tests:__subpackages__",
    ],
    deps = [":foo"],
)
